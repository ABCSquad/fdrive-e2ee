diff --git a/node_modules/libsignal-protocol/test/InMemorySignalProtocolStore.js b/node_modules/libsignal-protocol/test/InMemorySignalProtocolStore.js
index a424afe..be27253 100644
--- a/node_modules/libsignal-protocol/test/InMemorySignalProtocolStore.js
+++ b/node_modules/libsignal-protocol/test/InMemorySignalProtocolStore.js
@@ -1,7 +1,55 @@
-  function SignalProtocolStore() {
+import ByteBuffer from 'bytebuffer';
+
+export default  function SignalProtocolStore() {
   this.store = {};
 }
 
+var util = (function() {
+    'use strict';
+
+    var StaticArrayBufferProto = new ArrayBuffer().__proto__;
+
+    return {
+        toString: function(thing) {
+            if (typeof thing == 'string') {
+                return thing;
+            }
+            return new ByteBuffer.wrap(thing).toString('binary');
+        },
+        toArrayBuffer: function(thing) {
+            if (thing === undefined) {
+                return undefined;
+            }
+            if (thing === Object(thing)) {
+                if (thing.__proto__ == StaticArrayBufferProto) {
+                    return thing;
+                }
+            }
+
+            var str;
+            if (typeof thing == "string") {
+                str = thing;
+            } else {
+                throw new Error("Tried to convert a non-string of type " + typeof thing + " to an array buffer");
+            }
+            return new ByteBuffer.wrap(thing, 'binary').toArrayBuffer();
+        },
+        isEqual: function(a, b) {
+            // TODO: Special-case arraybuffers, etc
+            if (a === undefined || b === undefined) {
+                return false;
+            }
+            a = util.toString(a);
+            b = util.toString(b);
+            var maxLength = Math.max(a.length, b.length);
+            if (maxLength < 5) {
+                throw new Error("a/b compare too short");
+            }
+            return a.substring(0, Math.min(maxLength, a.length)) == b.substring(0, Math.min(maxLength, b.length));
+        }
+    };
+})();
+
 SignalProtocolStore.prototype = {
   Direction: {
     SENDING: 1,
